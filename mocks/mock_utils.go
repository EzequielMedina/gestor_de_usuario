// Code generated by MockGen. DO NOT EDIT.
// Source: gestor_de_usuario/internal/core/ports (interfaces: UtilService)
//
// Generated by this command:
//
//	mockgen -destination=mocks/mock_utils -package=mocks gestor_de_usuario/internal/core/ports UtilService
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockUtilService is a mock of UtilService interface.
type MockUtilService struct {
	ctrl     *gomock.Controller
	recorder *MockUtilServiceMockRecorder
	isgomock struct{}
}

// MockUtilServiceMockRecorder is the mock recorder for MockUtilService.
type MockUtilServiceMockRecorder struct {
	mock *MockUtilService
}

// NewMockUtilService creates a new mock instance.
func NewMockUtilService(ctrl *gomock.Controller) *MockUtilService {
	mock := &MockUtilService{ctrl: ctrl}
	mock.recorder = &MockUtilServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUtilService) EXPECT() *MockUtilServiceMockRecorder {
	return m.recorder
}

// ComparePassword mocks base method.
func (m *MockUtilService) ComparePassword(password, hashedPassword string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ComparePassword", password, hashedPassword)
	ret0, _ := ret[0].(error)
	return ret0
}

// ComparePassword indicates an expected call of ComparePassword.
func (mr *MockUtilServiceMockRecorder) ComparePassword(password, hashedPassword any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ComparePassword", reflect.TypeOf((*MockUtilService)(nil).ComparePassword), password, hashedPassword)
}

// HashPassword mocks base method.
func (m *MockUtilService) HashPassword(password string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HashPassword", password)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HashPassword indicates an expected call of HashPassword.
func (mr *MockUtilServiceMockRecorder) HashPassword(password any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HashPassword", reflect.TypeOf((*MockUtilService)(nil).HashPassword), password)
}

// IsValidEmail mocks base method.
func (m *MockUtilService) IsValidEmail(email string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsValidEmail", email)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsValidEmail indicates an expected call of IsValidEmail.
func (mr *MockUtilServiceMockRecorder) IsValidEmail(email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsValidEmail", reflect.TypeOf((*MockUtilService)(nil).IsValidEmail), email)
}

// IsValidPassword mocks base method.
func (m *MockUtilService) IsValidPassword(password string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsValidPassword", password)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsValidPassword indicates an expected call of IsValidPassword.
func (mr *MockUtilServiceMockRecorder) IsValidPassword(password any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsValidPassword", reflect.TypeOf((*MockUtilService)(nil).IsValidPassword), password)
}
